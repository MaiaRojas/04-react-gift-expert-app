{"version":3,"sources":["componets/AddCategory.js","helpers/getGifs.js","componets/GifGridItem.js","componets/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAlBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAEN,mCACTC,EAHe,iDAGiCC,UAAUH,GAH3C,6BAEN,oCAFM,SAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAClC,MAAO,CACLF,KACAC,QACAT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QAZb,kBAgBdM,GAhBc,4CAAH,sDCGPM,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACnC,OACE,sBAAKa,UAAU,uBAAf,UACE,4BAAKJ,IACL,qBAAKK,IAAKd,EAAKe,IAAKN,QCFbO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNY,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GACpBH,EAAS,CACPd,KAAMiB,EACNL,SAAS,SAGd,CAACnB,IAGGoB,EDbwBK,CAAazB,GAAhCY,EAF2B,EAEjCL,KAAcY,EAFmB,EAEnBA,QAEpB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDf,IAEjDmB,GAAW,mBAAGJ,UAAU,oCAAb,qBAEb,qBAAKA,UAAU,YAAf,SACIH,EAAOH,KAAI,SAAAiB,GAAG,OACd,cAAC,EAAD,eAEOA,GADAA,EAAIhB,aEZRiB,EAAe,WAAO,IAAD,EACIzC,mBAAS,CAAC,YAAa,YAAa,gBADxC,mBACzB0C,EADyB,KACb3C,EADa,KAGhC,OAAO,qCACL,8CACA,uBACA,cAAC,EAAD,CAAa2C,WAAYA,EAAY3C,cAAeA,IAEpD,6BACG2C,EAAWnB,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCPhD6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a5abac03.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if(inputValue.trim().length > 2) {\n      setCategories(cats => [ inputValue, ...cats,]);\n      setInputValue('');\n    }\n    \n  };\n\n  return (\n    <form onSubmit={handleSubmit}> \n      <input\n        type='text'\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  ) \n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}","export const getGifs = async (category) => {\n  \n  const apiKey = 'Nu96BV8MSZQv0VK6fQmql3v73Av6CtFF';\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\n\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(({ id, title, images }) => {\n    return {\n      id,\n      title,\n      url: images?.downsized_medium.url\n    }\n  });\n\n  return gifs;\n};","import React from 'react';\n\n\nexport const GifGridItem = ({ title, url}) => { \n  return (\n    <div className=\"card animate__fadeIn\">\n      <p>{ title }</p>\n      <img src={url} alt={title} />\n    </div>\n  )\n};","import React  from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({ category }) => {\n\nconst { data: images, loading} = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\n      { loading && <p className='animate__animated animate__fadeIn'>Loading</p>}\n\n      <div className='card-grid'>\n        { images.map(img => (\n          <GifGridItem\n            key={img.id}\n            { ...img }\n          />\n        ))}\n      </div>\n    </>\n  )\n}","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n        setState({\n          data: imgs,\n          loading: false,\n        })\n    })\n  }, [category]);\n\n\n  return state;\n}","import React, {useState} from 'react';\nimport { AddCategory } from './componets/AddCategory';\nimport { GifGrid } from './componets/GifGrid';\n\n\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball']);\n\n  return <>\n    <h2>GifExpertApp</h2>\n    <hr />\n    <AddCategory categories={categories} setCategories={setCategories} />\n\n    <ol>\n      {categories.map(category => <GifGrid key={category} category={category} />)}\n    </ol>\n  </>\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}